DX = (-1, +1, 0, 0)
DY = (0, 0, -1, +1)

from collections import deque


class Solution:

    # Visited to store all visited
    # Iterate through map, if not in visited,
    # count += 1, start BFS
    # if any node in BFS valid and not visited
    # add to visited to avoid repeated count
    def numIslands(self, grid) -> int:
        if not grid or not grid[0]:
            return 0

        visited = set()
        row_len = len(grid)
        col_len = len(grid[0])
        count = 0
        for i in range(row_len):
            for j in range(col_len):
                cell = grid[i][j]
                if cell == "0":
                    continue
                if (i, j) in visited:
                    continue
                visited.add((i, j))
                count += 1
                queue = deque([(i, j)])
                while queue:
                    x, y = queue.popleft()

                    for dx, dy in zip(DX, DY):
                        new_x = x + dx
                        new_y = y + dy
                        if self.check_index(new_x, new_y, row_len, col_len):
                            if (new_x, new_y) not in visited:
                                if grid[new_x][new_y] == "1":
                                    queue.append((new_x, new_y))
                                    visited.add((new_x, new_y))

        return count

    def check_index(self, x, y, row_len, col_len):
        return 0 <= x < row_len and 0 <= y < col_len
    
sol = Solution()
print(sol.numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))